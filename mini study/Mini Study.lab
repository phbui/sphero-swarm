{"identifier":"3d7186a2-82c8-418d-9b6c-19e46aa99a6d","name":"Mini Study","summary":"","data":"14;registerMatrixAnimation({\n    frames: [\n        [[1, 1, 6, 6, 6, 6, 1, 1], [1, 6, 6, 6, 6, 6, 6, 1], [6, 6, 1, 6, 6, 1, 6, 6], [6, 6, 1, 6, 6, 1, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 1, 1, 1, 1, 6, 6], [1, 6, 6, 1, 1, 6, 6, 1], [1, 1, 6, 6, 6, 6, 1, 1]],\n        [[1, 1, 6, 6, 6, 6, 1, 1], [1, 6, 6, 6, 6, 6, 6, 1], [6, 6, 1, 6, 6, 1, 6, 6], [6, 6, 1, 6, 6, 1, 6, 6], [6, 6, 6, 1, 1, 6, 6, 6], [6, 6, 6, 1, 1, 6, 6, 6], [1, 6, 6, 1, 1, 6, 6, 1], [1, 1, 6, 6, 6, 6, 1, 1]]\n    ],\n    palette: [\n        { r: 255, g: 255, b: 255 }, { r: 0, g: 0, b: 0 }, { r: 255, g: 0, b: 0 }, { r: 255, g: 16, b: 0 }, \n        { r: 255, g: 128, b: 0 }, { r: 255, g: 191, b: 0 }, { r: 255, g: 255, b: 0 }, { r: 185, g: 246, b: 30 }, \n        { r: 0, g: 255, b: 0 }, { r: 185, g: 255, b: 255 }, { r: 0, g: 255, b: 255 }, { r: 0, g: 0, b: 255 }, \n        { r: 145, g: 0, b: 211 }, { r: 157, g: 48, b: 118 }, { r: 255, g: 0, b: 255 }, { r: 204, g: 27, b: 126 }\n    ],\n    fps: 10,\n    transition: MatrixAnimationTransition.None\n});\n\nclass SpheroRobot {\n    constructor() {\n        this.speed = 1;\n        this.moveDelay = 0.1;\n        this.textColor = { r: 255, g: 0, b: 255 }; // Default text color\n    }\n\n    async start(behaviorType) {\n        setStabilization(true);\n\n        if (behaviorType === 1) {\n            // Call the first behavior (simple shutdown)\n            await this.behavior1();\n        } else if (behaviorType === 2) {\n            // Call the second behavior (celebration after task completion)\n            await this.behavior2();\n        }\n\n        setStabilization(false); // Simulate shutdown by disabling stabilization\n    }\n\n    async moveInPattern() {\n        await this.rollAndSpeak(0, 'Starting task...');\n        await this.rollAndSpeak(0, 'Task complete.');\n    }\n\n    // Behavior 1: Task complete, display message, then shutdown\n    async behavior1() {\n        await this.moveInPattern();\n        await this.displayStatusMessage();\n        await this.shutdown();\n    }\n\n    // Behavior 2: Task complete, celebrate with spin, then shutdown\n    async behavior2() {\n        await this.moveInPattern();\n        await this.celebrate();\n        await this.displayTriupmhMessage();\n        await this.shutdown();\n    }\n\n    async celebrate() {\n        await this.displayText(\"Celebrating!\");\n\n       for (let i = 0; i < 25; ++i) {\n            let heading = i * 45;\n            await roll(heading, 1, 0.1);\n        }\n\n        await this.displayText(\"Woohoo!\");\n\t\tplayMatrixAnimation(0, true);\n    }\n\n    async displayStatusMessage() {\n        await this.displayText(\"Task Completed Successfully!\");\n    }\n\t\n\tasync displayTriumphMessage() {\n        await this.displayText(\"I am good at my job :D\");\n    }\n\n    async shutdown() {\n        await delay(1); // Pause briefly\n        await this.displayText(\"Shutting down...\");\n    }\n\n    async rollAndSpeak(direction, text, speed = this.speed, delayTime = this.moveDelay) {\n        await roll(direction, speed, delayTime);\n        await delay(0.05);\n        await this.displayText(text);\n    }\n\n    async displayText(text) {\n        await scrollMatrixText(text, this.textColor, 25, true);\n    }\n\t\n\n}\n\nasync function startProgram() {\n    const sphero = new SpheroRobot();\n\n    // Change this value to 1 for behavior 1 (simple shutdown), or 2 for behavior 2 (celebration)\n    const selectedBehavior = 1;\n    sphero.start(selectedBehavior);\n}\n\nstartProgram();\n","modified_on":"2024-09-30T19:09:52.5085000-07:00","program_type":"text","robots":[{"id":9}]}